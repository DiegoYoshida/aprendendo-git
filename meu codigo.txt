Olá, meu nome é Diego e estou aprendendo GIT.

commits - versões do código
untracked - não há arquivos no controle de versão.

COMO CONFIGURAR O GIT?
-git config --global usar.email "you@example.com"
-git config --global usar.name "Your name"


***GIT STATUS verifica o status do arquivo***

***INCLUIR ARQUIVO:***
- git add "nome do arquivo"

E se houver mais arquivos?
- git add .

***COMO CRIAR VERSÕES DO CÓDIGO COM COMMIT?

- git commit -m "commit inicial"

m = mensagem para descrever o que foi feito de alteração no código.

***COMO ENVIAR ALTERAÇÕES USANDO GIT PUSH***
- git push 
obs: enviar o código para nuvem no GitHub

-git remote add origin COLOCAR O LINK DO REPOSITORIO GITHUB

-git push --set-upstream origin master 
obs: branch master


***CICLO DE ATUALIZAÇÃO DE CÓDIGO***
Passos:
git add .
git status 
git commit -m ""
git push


***COMO VERIFICAR HISTÓRICO DE VERSÕES***
git reflog

***COMO NAVEGAR ENTRE AS VERSÕES DO CÓDIGO***

git reset --hard ID

***O QUE SÃO BRANCHES E COMO CRIAR UMA?***

Branch = Galho

São caminhos diferentes que você vai seguir durante o desenvolvimento.

Cada branch um local para armazenar seu desenvolvimento.

Branch A, B, C etc...

Exemplo: 
Branch A é a master, ou seja, uma branch estável. Só código que funciona.
Branch B e C, realizações de códigos 'teste' para depois ser adicionado para a branch principal.

-git branch
obs: Ver quais branches estão disponíveis no momento.

Para criar uma branch
- git branch NOME
obs: staging é o nome que você da para um branch que está recebendo atualizações que não foram testadas.

BRANCH COM * E VERDE significa que estamos trabalho nela no momento.

Para mudar de branch:
- git checkout staging

Para fazer um commit na nova branch
- git push --set-upstream origin NOME DA BRANCHE

Como trazer as att para a branch principal
- MERGE

***GIT MERGE COMO UNIR O CÓDIGO***
PASSOS:
Ir para a branch de destino 
-git checkout master
------------------------------
Puxar as informações da outra branch
-git merge staging 

ANTES DE FAZER O MERGE
utiliza o comando
-git pull
obs: Ele pega o código mais atualizado para você fazer o merge

PASSOS DO MERGE:
1- GIT PULL DA BRANCH PRINCIPAL
2- GERAR UMA NOVA BRANCH A PARTIR DA BRANCH PRINCIPAL
3- TRABALHAR E ADICIONAR NOVAS FUNCIONALIDADES NA NOVA BRANCH QUE CRIOU
4- FINALIZAR O TRABALHO NA BRANCH TEMPORÁRIA
5- GIT CHECKOUT NA BRANCH PRINCIPAL
6- GIT PULL
7- MERGIAR (UNIR) O CÓDIGO DA BRANCH TEMPORÁRIA COM A BRANCH PRINCIPAL (DEPOIS DE TESTAR)
8- GIT PUSH DA BRANCH PRINCIPAL

--------------
Adicionando nova funcionalidade na branch principal
git checkout -b nome-da-branch master
<<<<<<< HEAD
=======


***PULL REQUEST DE UM MERGE DEMOCRÁTICO***

Fazer a atualização do código e fazer o PUSH para a nuvem.

git push


git push --set-upstream origin NOME DA BRANCHE

Após isso entrar no site do GITHUB e selecionar COMPARE E PUL REQUEST selecionar da onde quer mergear para a branche de destino (ex: branch master), logo após isso, irá criar uma tela para você descrever o que foi feito para que outra pessoa possa verificar e se vai aceitar ou não.

*** GIT IGNORE ***

Serve para que um arquivo não suba para o controle de versão.
Ex: Uma pasta com senhas.

E para fazer isso basta digitar esse comando:
touch .gitignore
Após fazer isso será criado uma pasta chamado gitignore no seu projeto, abra-o com o notepad e escreva o novo do arquivo que você não quer que seja adicionado ao controle de versão, ex: segredos/ e salve o arquivo.

/ = para pastas que você não quer que seja adicionado, caso for um arquivo comum basta digitar o nome dele.

>>>>>>> sistema-de-login
